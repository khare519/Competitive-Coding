/*
Use linked list concept to solve the problem, otherwise you will be disqualified from the contest.
*/

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct node{
    int data;
    struct node*left;
    struct node*right;
};
struct node* newNode(int value)
{
    struct node* node= (struct node*)malloc(sizeof(struct node));
    node->data=value;
    node->left=NULL;
    node->right=NULL;
    return(node);
}
struct node* insert(struct node* temp, int key)
{
    
    if (temp == NULL)
        return newNode(key);
 
    
    if (key%4==0)
        temp->left = insert(temp->left, key);
    else 
        temp->right = insert(temp->right, key);
 
    
    return temp;
}
void printCurrentLevel(struct node* root, int level);
int height(struct node* node);
struct node* newNode(int data);

void printLevelOrder(struct node* root)
{
    int h = height(root);
    int i;
    for (i = 1; i <= h; i++)
        printCurrentLevel(root, i);
}
 

void printCurrentLevel(struct node* root, int level)
{
    if (root == NULL)
        return;
    if (level == 1)
        printf("%d ", root->data);
    else if (level > 1) {
        printCurrentLevel(root->left, level - 1);
        printCurrentLevel(root->right, level - 1);
    }
}

int height(struct node* node)
{
    if (node == NULL)
        return 0;
    else {
        
        int lheight = height(node->left);
        int rheight = height(node->right);
 
        if (lheight > rheight)
            return (lheight + 1);
        else
            return (rheight + 1);
    }
}
int main() {

    int t;
    scanf("%d",&t);
    int m;
    for(m=1;m<=t;m++)
    {
        int n;
        scanf("%d",&n);
        int a[n];
        int i;
        for(i=0;i<n;i++)
            scanf("%d",&a[i]);
        struct node* root=NULL;
        root=insert(root,a[0]);
        for(i=1;i<n;i++)
        {
            
            insert(root,a[i]);
        }
        printLevelOrder(root);
        printf("\n");
    }
    return 0;
}
